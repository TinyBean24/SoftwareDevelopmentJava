Ch 8 Programming Assignment:

Ex 8.4 (Rectangle Class)
    Create a class Rectangle with attributes "length" and "width", each of which defaults to "1".
    Provide methods that CALCULATE "perimeter" and "area". 
    It has "get" and "set" methods for BOTH length and width"
    The set methods should VERIFY that length and width are "floating point numbers LARGER than 0.0, and LESS than 20.0"
    Write a program to test the class Rectangle (RectangleTest.java)


Ex 8.6 (Savings Account Class)
    Create a class "SavingsAccount"
    use a "static" variable "annualInterestRate" to store the annual intererst rate for all account holders
    Each object of the class contains a "private" instance variable "savingsBalance" indicating the amount the saver currently has on deposit
    Provide method "calculateMonthlyInterest" to calculate the monthly interesting by "multiplying" the savingsBalance by annualInterestRate
    divided by 12 (monthlyInterest = savingsBalance * annualInterestRate / 12) then add to "savings-Balance".
    
    Provide a "static" method "modifyInterestRate" that "sets" the annualInterestRate to a new value.
    Write a program "SavingsAccountTest.java". 
    Instantiate TWO savingsAccount objects "saver1", and "saver2", with balances of $2000.00 and $3000.00 respectively.
    Set "annualInterestRate" to "4%"
    Calculate the monthly interest for each of 12 months
    Print new balances for both savers.
    Set the annualInterestRate to "%5" and calculate the next months interest
    Print new balances for both savers. 


Ex 8.8 (Enhancing Class Date)
    Modify Date (Fig.8.7) to perform error checking on the initializer values for variables "month", "day", and "year"
    (currently it only validates the month and day)
    Provide a method "nextDay" to increment the day by "one".
    Write a program that tests method "nextDay" in a LOOP that prints the date during each iteration to show the method works.
    Test the following cases:
      1. incrementing into the next month
      2. incrementing into the next year
Optional:

(Ex 8.15) (Date Class)
    Create a "Date" class with the following capabilities:
      1. output the date in multiple formats:
	MM/DD/YYYY
	June 14, 1992
	DDD YYYY
     
      2. Use OVERLOADED constructors to create "Date" objects initialized with dates of the formats in part (1).
	The first cases the constructor should receive THREE INTEGER values.
	The second case should receive a STRING and TWO INTEGER values
	The third case should receive TWO INTEGER values, the first represents the day number in the year 
